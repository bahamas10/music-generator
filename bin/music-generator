#!/usr/bin/env node
/*
 * CLI wrapper for the music generator (Song class)
 *
 * Dave Eddy
 * August 30th 2021
 * License: MIT
 */

var f = require('util').format;

var assert = require('assert-plus');
var getopt = require('posix-getopt');

var Song = require('../lib/song.js').Song;

// default options, overridden by CLI opts
var opts = {
    bpm: 60,
    beatsPerBar: 4,
    transpose: 12,
    sustain: false,
    leftHandRange: {
        root: 7,
        min: 0,
        max: 14
    },
    rightHandRange: {
        min: 14,
        max: 28
    },
    velocityRange: {
        min: 25,
        max: 42
    },
    sectionLengths: {
        leftHand: 4,
        rightHand: 8
    }
};

function usage() {
    return [
        'Usage: music-generator [options] <pattern> > out.mid',
        '',
        'Example:',
        '  music-generator AABA > foo.mid',
        '',
        'Options',
        '  -b, --bpm <num>                     bpm, defaults to ' + opts.bpm,
        '  -B, --beats-per-bar <num>           beats per bar (like time signature), defaults to ' + opts.beatsPerBar,
        '  -h, --help                          print this message and exit',
      f('  -L, --left-hand-range <num-num>     pitch range for the left hand, defaults to %d-%d', opts.leftHandRange.min, opts.leftHandRange.max),
        '  -r, --root <num>                    left hand root, defaults to ' + opts.leftHandRange.root,
      f('  -R, --right-hand-range <num-num>    pitch range for the right hand, defaults to %d-%d', opts.rightHandRange.min, opts.rightHandRange.max),
        '  -s, --sustain                       enable the sustain pedal, defaults to ' + opts.sustain,
      f('  -S, --section-lengths <left,right>  number of bars per section, defaults to %d,%d', opts.sectionLengths.leftHand, opts.sectionLengths.rightHand),
        '  -t, --transpose <num>               amount to transpose the song, defaults to ' + opts.transpose,
      f('  -V, --velocity-range <num-num>      velocity range for each note, defaults to %d-%d', opts.velocityRange.min, opts.velocityRange.max)
    ].join('\n');
}

function parseRange(s, c) {
    assert.string(s, 's');
    assert.string(c, 'c');

    var spl = s.split(c);

    assert.equal(spl.length, 2, 'invalid range');

    var n = spl.map(function (num) {
        var parsed = parseInt(num, 10);
        assert.number(parsed, 'parsed');
        return parsed;
    });

    assert.arrayOfNumber(n, 'n');

    return n;
}

function main() {
    var options = [
        'b:(bpm)',
        'B:(beats-per-bar)',
        'h(help)',
        'L:(left-hand-range)',
        'r:(root)',
        'R:(right-hand-range)',
        's(sustain)',
        'S:(section-lengths)',
        't:(transpose)',
        'V:(velocity-range)',
    ].join('');
    var parser = new getopt.BasicParser(options, process.argv);

    var n;
    var option;
    var leftHandRange = null;
    var rightHandRange = null;
    var sectionLengths = null;
    var velocityRange = null;
    while ((option = parser.getopt()) !== undefined) {
        switch (option.option) {
            case 'b': opts.bpm = parseInt(option.optarg, 10); break;
            case 'B': opts.beatsPerBar = parseInt(option.optarg, 10); break;
            case 'h': console.log(usage()); process.exit(0);
            case 'L': leftHandRange = option.optarg; break;
            case 'r': opts.leftHandRange.root = parseInt(option.optarg, 10); break;
            case 'R': rightHandRange = option.optarg; break;
            case 's': opts.sustain = true; break;
            case 'S': sectionLengths = option.optarg; break;
            case 't': opts.transpose = parseInt(option.optarg, 10); break;
            case 'V': velocityRange = option.optarg; break;
            default: console.error(usage()); process.exit(1);
        }
    }
    var args = process.argv.slice(parser.optind());

    var pattern = args[0];

    if (!pattern) {
        console.error('usage: music-generator [opts] <pattern-string>');
        process.exit(1);
    }

    if (velocityRange) {
        n = parseRange(velocityRange, '-');
        opts.velocityRange.min = n[0];
        opts.velocityRange.max = n[1];
    }

    if (sectionLengths) {
        n = parseRange(sectionLengths, ',');
        opts.sectionLengths.leftHand = n[0];
        opts.sectionLengths.rightHand = n[1];
    }

    if (leftHandRange) {
        n = parseRange(leftHandRange, '-');
        opts.leftHandRange.min = n[0];
        opts.leftHandRange.max = n[1];
    }

    if (rightHandRange) {
        n = parseRange(rightHandRange, '-');
        opts.rightHandRange.min = n[0];
        opts.rightHandRange.max = n[1];
    }

    console.error(opts);

    var song = new Song(opts);

    song.on('log', console.error);

    song.generate(pattern);

    console.log(song.getMidiData());
}

main();
